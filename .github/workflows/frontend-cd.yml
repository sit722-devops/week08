# week08/.github/workflows/frontend-cd.yml

name: Frontend CD - Deploy to AKS (inject IPs + kubeconfig)

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: "http://<PRODUCT_EXTERNAL_IP>:8000"
        required: true
      order_api_ip:
        description: "http://<ORDER_EXTERNAL_IP>:8001"
        required: true

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Inject backend URLs into frontend/main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${{ github.event.inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ github.event.inputs.order_api_ip }}|g"   frontend/main.js
          echo "Preview of updated main.js (first 40 lines):"
          sed -n '1,40p' frontend/main.js

      - name: Docker login to ACR (admin user)
        run: echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ env.ACR_LOGIN_SERVER }} -u "${{ secrets.ACR_USERNAME }}" --password-stdin

      - name: Build & push frontend (with injected URLs)
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./frontend
          docker push  ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Install kubectl
        run: |
          curl -fsSL -o kubectl "https://dl.k8s.io/release/$(curl -fsSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Write kubeconfig from secret
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_B64 }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          kubectl cluster-info

      - name: Inject ACR into frontend manifest & deploy
        run: |
          sed -i "s|_ACR_LOGIN_SERVER_|${{ env.ACR_LOGIN_SERVER }}|g" k8s/frontend.yaml
          kubectl apply -f k8s/frontend.yaml
          kubectl get svc -o wide
