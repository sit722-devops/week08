name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'AKS cluster name'
        required: true
        default: 'aks-week08-pramodya'
      aks_resource_group:
        description: 'AKS resource group'
        required: true
        default: 'rg-week08-pramodya'

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Login to ACR (same way as Backend CI)
      - name: Docker login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_ACR_LOGIN_SERVER }}   # e.g. acrweek08pramodya.azurecr.io
          username:     ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          password:     ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}

      # Build & push the frontend image
      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/frontend:latest ./frontend
          docker push    ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/frontend:latest

      # Set kube context
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ inputs.aks_resource_group }}
          cluster-name:   ${{ inputs.aks_cluster_name }}

      # Apply (ClusterIP) service + deployment if needed
      - name: Apply frontend manifest
        run: |
          kubectl apply -f k8s/frontend.yaml
          kubectl get deploy,svc -o wide

      # Rollout to pick up the new image tag (latest)
      - name: Restart frontend deployment
        run: |
          kubectl rollout restart deployment/frontend
          kubectl rollout status  deployment/frontend --timeout=300s

      - name: Logout
        if: always()
        run: az logout
