name: Backend CI — test, build & push (ACR)

on:
  workflow_dispatch:
  push:
    branches: [ main, task/9.2c ]
    paths:
      - "backend/**"
      - ".github/workflows/backend_ci.yml"

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}              # <— ACR registry NAME (no .azurecr.io)

jobs:
  test_and_build:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports: [ "5433:5432" ]
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set REGISTRY_SERVER env
        run: echo "REGISTRY_SERVER=${{ env.ACR_NAME }}.azurecr.io" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps (all backends)
        run: |
          pip install --upgrade pip pytest httpx
          for req in backend/*/requirements.txt; do
            echo "Installing $req"; pip install -r "$req";
          done

      - name: Test product_service
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q

      - name: Test order_service
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q

      # Build & push only on non-PR pushes
      - name: Azure Login
        if: github.event_name == 'push'
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login (name, not FQDN)
        if: github.event_name == 'push'
        run: az acr login -n "${{ env.ACR_NAME }}"

      - name: Build & push product_service (SHA + latest)
        if: github.event_name == 'push'
        run: |
          docker build -t $REGISTRY_SERVER/product_service:${GITHUB_SHA} ./backend/product_service
          docker tag   $REGISTRY_SERVER/product_service:${GITHUB_SHA} $REGISTRY_SERVER/product_service:latest
          docker push  $REGISTRY_SERVER/product_service:${GITHUB_SHA}
          docker push  $REGISTRY_SERVER/product_service:latest

      - name: Build & push order_service (SHA + latest)
        if: github.event_name == 'push'
        run: |
          docker build -t $REGISTRY_SERVER/order_service:${GITHUB_SHA} ./backend/order_service
          docker tag   $REGISTRY_SERVER/order_service:${GITHUB_SHA} $REGISTRY_SERVER/order_service:latest
          docker push  $REGISTRY_SERVER/order_service:${GITHUB_SHA}
          docker push  $REGISTRY_SERVER/order_service:latest

      - name: Logout Azure
        if: always()
        run: az logout
