name: Backend CI - Test, Build and Push Images to ACR

on:
  # Manual trigger
  workflow_dispatch:
  # Auto on push to main (only when backend or this file changes)
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

# --- Global env used by jobs/steps ---
env:
  # MUST exist in repo secrets: REGISTRY_LOGIN_SERVER=sriniw08acr.azurecr.io
  ACR_LOGIN_SERVER: "${{ secrets.REGISTRY_LOGIN_SERVER }}"
  # MUST exist in repo secrets: ACR_NAME=sriniw08acr (short name, no domain)
  ACR_NAME: "${{ secrets.ACR_NAME }}"
  # Keep v1 to match your k8s images
  IMAGE_TAG: "v1"

jobs:
  # 1) Run tests for both backend services (must pass before building/pushing)
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  # 2) Build & push images ONLY if tests passed
  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          # MUST exist in repo secrets: AZURE_CREDENTIALS (full --sdk-auth JSON)
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: az acr login --name "${{ secrets.ACR_NAME }}"

      - name: Build and Push Product Service Image
        run: |
          docker build -t "${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}" ./backend/product_service
          docker push "${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}"

      - name: Build and Push Order Service Image
        run: |
          docker build -t "${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}" ./backend/order_service
          docker push "${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}"

      - name: Logout from Azure
        if: always()
        run: az logout