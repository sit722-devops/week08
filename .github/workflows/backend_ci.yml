name: Backend CI - Test, Build and Push Images to ACR

on:
  workflow_dispatch:
  push:
    branches: [ main, development ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'
  pull_request:
    branches: [ main, development ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

env:
  # e.g. sit722w08acr1234.azurecr.io â€” set as a repo secret
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5432:5432" ]

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5433:5432" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.10 (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install deps
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Test product_service
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Test order_service
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends
    # Don't push images on PRs
    if: ${{ github.event_name != 'pull_request' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC or SP JSON)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Build & Push Product Service (SHA + latest)
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ github.sha }} ./backend/product_service/
          docker tag    ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ github.sha }} ${{ env.ACR_LOGIN_SERVER }}/product_service:latest
          docker push   ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ github.sha }}
          docker push   ${{ env.ACR_LOGIN_SERVER }}/product_service:latest

      - name: Build & Push Order Service (SHA + latest)
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ github.sha }} ./backend/order_service/
          docker tag    ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ github.sha }} ${{ env.ACR_LOGIN_SERVER }}/order_service:latest
          docker push   ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ github.sha }}
          docker push   ${{ env.ACR_LOGIN_SERVER }}/order_service:latest

      - name: Logout Azure
        if: always()
        run: az logout
