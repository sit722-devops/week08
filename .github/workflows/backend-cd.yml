name: Backend CD - Deploy to AKS (kubeconfig secret)

on:
  workflow_dispatch:

env:
  # e.g. belieliu27w08acr.azurecr.io (repo secret)
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          curl -fsSL -o kubectl "https://dl.k8s.io/release/$(curl -fsSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Write kubeconfig from secret
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_B64 }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          kubectl cluster-info

      - name: Inject ACR into backend manifests
        run: |
          sed -i "s|_ACR_LOGIN_SERVER_|${{ env.ACR_LOGIN_SERVER }}|g" k8s/product-service.yaml
          sed -i "s|_ACR_LOGIN_SERVER_|${{ env.ACR_LOGIN_SERVER }}|g" k8s/order-service.yaml

      - name: Apply backend infra (ConfigMap, Secrets, Databases)
        run: |
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-db.yaml

      - name: Deploy backend services
        run: |
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml
          kubectl get pods -o wide
          kubectl get svc  -o wide

      - name: Wait for external IPs (<= 5 min)
        id: wait_ips
        run: |
          for i in {1..60}; do
            PIP=$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            OIP=$(kubectl get svc order-service-w08e1   -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            echo "Attempt $i: product=$PIP order=$OIP"
            if [ -n "$PIP" ] && [ -n "$OIP" ]; then
              echo "PRODUCT_IP=$PIP" >> $GITHUB_ENV
              echo "ORDER_IP=$OIP"   >> $GITHUB_ENV
              echo "product_ip=$PIP" >> $GITHUB_OUTPUT
              echo "order_ip=$OIP"   >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 5
          done
          echo "Failed to get external IPs in time."
          exit 1

      - name: Show IPs
        run: |
          echo "PRODUCT_IP=${{ env.PRODUCT_IP }}"
          echo "ORDER_IP=${{ env.ORDER_IP }}"
