name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'aks-week08-pramodya'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'rg-week08-pramodya'
      aks_acr_name:
        description: 'Name of ACR (not loginServer)'
        required: true
        default: 'acrweek08pramodya'

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production
    env:
      PRODUCT_SVC: product-service
      ORDER_SVC: order-service

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Ensure kubectl exists
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      # Set kube context to your AKS (more reliable than raw az get-credentials)
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ github.event.inputs.aks_cluster_name }}
          resource-group: ${{ github.event.inputs.aks_resource_group }}

      # Safety: make sure AKS can pull from your ACR
      - name: Attach ACR to AKS
        run: |
          az aks update \
            --name "${{ github.event.inputs.aks_cluster_name }}" \
            --resource-group "${{ github.event.inputs.aks_resource_group }}" \
            --attach-acr "${{ github.event.inputs.aks_acr_name }}"

      - name: Show cluster info (debug)
        run: |
          kubectl version --client
          kubectl config current-context
          kubectl get nodes -o wide

      - name: Deploy backend infra (ConfigMaps, Secrets, DBs)
        run: |
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-db.yaml

      - name: Deploy backend services
        run: |
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml

      - name: Show resources after apply (debug)
        run: |
          kubectl get pods -o wide
          kubectl get svc  -o wide

      - name: Wait for LoadBalancer IPs
        shell: bash
        run: |
          set -euo pipefail
          echo "Waiting for external IPs (max 5 min)â€¦"
          for i in {1..60}; do
            PRODUCT_IP=$(kubectl get svc "$PRODUCT_SVC" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            ORDER_IP=$(kubectl get svc "$ORDER_SVC"   -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            echo "Attempt $i: PRODUCT_IP=${PRODUCT_IP:-<pending>}  ORDER_IP=${ORDER_IP:-<pending>}"
            if [[ -n "${PRODUCT_IP:-}" && -n "${ORDER_IP:-}" ]]; then
              echo "PRODUCT_IP=$PRODUCT_IP" | tee -a $GITHUB_ENV
              echo "ORDER_IP=$ORDER_IP"     | tee -a $GITHUB_ENV
              break
            fi
            sleep 5
          done
          if [[ -z "${PRODUCT_IP:-}" || -z "${ORDER_IP:-}" ]]; then
            echo "Timed out waiting for LoadBalancer IPs"
            echo "Services in cluster:"; kubectl get svc -o wide
            exit 1
          fi

      - id: get_product_ip
        name: Set output PRODUCT_API_IP
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - id: get_order_ip
        name: Set output ORDER_API_IP
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout
        if: always()
        run: az logout
