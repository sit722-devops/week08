name: CD — Deploy Backend Services to AKS

on:
  workflow_dispatch: {}

env:
  RG:  ${{ vars.AKS_RESOURCE_GROUP }}
  AKS: ${{ vars.AKS_CLUSTER_NAME }}
  NS:  ${{ vars.AKS_NAMESPACE }}
  ACR_NAME: ${{ vars.ACR_NAME }}
  PRODUCT_SVC: product-service         # change if your k8s Service has a suffix
  ORDER_SVC:   order-service           # change if your k8s Service has a suffix

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.out_prod_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.out_order_ip.outputs.external_ip }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: az aks get-credentials --resource-group "$RG" --name "$AKS" --overwrite-existing

      - name: Ensure namespace exists
        run: kubectl get ns "$NS" || kubectl create ns "$NS"

      - name: Attach ACR (idempotent; ignore if no rights)
        continue-on-error: true
        run: az aks update --name "$AKS" --resource-group "$RG" --attach-acr "$ACR_NAME"

      - name: Apply infra (ConfigMaps, Secrets, DBs)
        working-directory: k8s
        run: |
          kubectl -n "$NS" apply -f configmaps.yaml
          kubectl -n "$NS" apply -f secrets.yaml
          kubectl -n "$NS" apply -f product-db.yaml
          kubectl -n "$NS" apply -f order-db.yaml

      - name: Deploy product & order services
        working-directory: k8s
        run: |
          kubectl -n "$NS" apply -f product-service.yaml
          kubectl -n "$NS" apply -f order-service.yaml

      - name: Wait for LoadBalancer IPs (≤5 min)
        shell: bash
        run: |
          set -e
          for i in {1..60}; do
            PROD_IP=$(kubectl -n "$NS" get svc "$PRODUCT_SVC" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORD_IP=$(kubectl -n "$NS"  get svc "$ORDER_SVC"   -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            echo "Attempt $i: product=${PROD_IP:-<none>} order=${ORD_IP:-<none>}"
            if [[ -n "$PROD_IP" && -n "$ORD_IP" ]]; then
              echo "PRODUCT_IP=$PROD_IP" >> $GITHUB_ENV
              echo "ORDER_IP=$ORD_IP"   >> $GITHUB_ENV
              exit 0
            fi
            sleep 5
          done
          echo "Timed out waiting for external IPs"; exit 1

      - id: out_prod_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - id: out_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Azure Logout
        if: always()
        run: az logout
