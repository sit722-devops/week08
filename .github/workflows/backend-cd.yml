name: Backend CD - Deploy to AKS

on:
  workflow_dispatch: {}

env:
  RG:  ${{ secrets.AZURE_RG }}
  AKS: ${{ secrets.AKS_NAME }}
  ACR: ${{ secrets.ACR_NAME }}

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: az aks get-credentials -g "$RG" -n "$AKS" --overwrite-existing

      # Only needed once, safe to leave here
      - name: Attach ACR (idempotent)
        run: az aks update -g "$RG" -n "$AKS" --attach-acr "$ACR"

      - name: Apply backend K8s resources
        run: |
          set -e
          cd k8s
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml

      - name: Wait for deployments
        run: |
          kubectl rollout status deploy/product-service --timeout=180s || true
          kubectl rollout status deploy/order-service   --timeout=180s || true

      - name: Show cluster state
        run: kubectl get deploy,svc,pods -o wide

      - name: Get Backend Service IPs (job outputs)
        id: get_ips
        shell: bash
        run: |
          PRODUCT_IP=$(kubectl get svc product-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          ORDER_IP=$(kubectl get svc order-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV
          echo "product_ip=$PRODUCT_IP" >> $GITHUB_OUTPUT
          echo "order_ip=$ORDER_IP" >> $GITHUB_OUTPUT

      - name: Logout Azure
        if: always()
        run: az logout
