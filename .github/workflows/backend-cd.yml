name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'aks-week08'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'rg-week08'
      aks_acr_name:
        description: 'Name of ACR'
        required: true
        default: 'acrweek0820618'

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group ${{ github.event.inputs.aks_resource_group }} \
            --name ${{ github.event.inputs.aks_cluster_name }} \
            --overwrite-existing

      - name: Ensure namespace exists and set as current
        run: |
          kubectl create namespace shop --dry-run=client -o yaml | kubectl apply -f -
          kubectl config set-context --current --namespace=shop

      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          kubectl apply -n shop -f k8s/configmaps.yaml
          kubectl apply -n shop -f k8s/secrets.yaml
          kubectl apply -n shop -f k8s/product-db.yaml
          kubectl apply -n shop -f k8s/order-db.yaml

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          kubectl apply -n shop -f k8s/product-service.yaml
          kubectl apply -n shop -f k8s/order-service.yaml
          kubectl get all -n shop

      # âœ… Hardcode the correct LB service names you actually have
      - name: Set service names explicitly
        run: |
          echo "PROD_SVC=product-service-w08e1"  >> $GITHUB_ENV
          echo "ORDER_SVC=order-service-w08e1"   >> $GITHUB_ENV

      # Short, robust fetch: accept ip or hostname; loop briefly just in case
      - name: Fetch Backend LoadBalancer endpoints
        run: |
          get_lb () {
            local svc="$1"
            local v
            v=$(kubectl get svc "$svc" -n shop -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [ -z "$v" ]; then
              v=$(kubectl get svc "$svc" -n shop -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            fi
            echo "$v"
          }

          PRODUCT_IP=""
          ORDER_IP=""

          for i in $(seq 1 30); do  # ~2.5 minutes max; your IPs already exist
            PRODUCT_IP=$(get_lb "$PROD_SVC")
            ORDER_IP=$(get_lb "$ORDER_SVC")
            echo "Attempt $i: $PROD_SVC => ${PRODUCT_IP:-<pending>}, $ORDER_SVC => ${ORDER_IP:-<pending>}"
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then break; fi
            sleep 5
          done

          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Services didn't report LB endpoints fast enough:"
            kubectl get svc -n shop -o wide || true
            exit 1
          fi

          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP"   >> $GITHUB_ENV
          echo "Product endpoint: $PRODUCT_IP"
          echo "Order endpoint:   $ORDER_IP"

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout from Azure
        run: az logout
