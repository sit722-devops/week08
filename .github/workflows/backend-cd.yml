name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch: {}

env:
  RG:        ${{ vars.AKS_RESOURCE_GROUP }}
  AKS:       ${{ vars.AKS_CLUSTER_NAME }}
  NS:        ${{ vars.AKS_NAMESPACE }}
  ACR_NAME:  ${{ vars.ACR_NAME }}

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.out_prod_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.out_order_ip.outputs.external_ip }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: az aks get-credentials --resource-group "$RG" --name "$AKS" --overwrite-existing

      - name: Ensure namespace exists
        run: kubectl get ns "$NS" || kubectl create ns "$NS"

      # Never fail on ACR attach; skip if you don't have Owner.
      - name: Attach ACR (idempotent; ignore if no rights)
        shell: bash
        run: |
          set +e
          az aks update --name "$AKS" --resource-group "$RG" --attach-acr "$ACR_NAME"
          [ $? -ne 0 ] && echo "Skipping ACR attach (no Owner rights)" || true
          exit 0

      - name: Apply infra (ConfigMaps, Secrets, DBs)
        working-directory: k8s
        run: |
          kubectl -n "$NS" apply -f configmaps.yaml
          kubectl -n "$NS" apply -f secrets.yaml
          kubectl -n "$NS" apply -f product-db.yaml
          kubectl -n "$NS" apply -f order-db.yaml

      - name: Deploy product & order services
        working-directory: k8s
        run: |
          kubectl -n "$NS" apply -f product-service.yaml
          kubectl -n "$NS" apply -f order-service.yaml
          echo "--- services after apply ---"
          kubectl -n "$NS" get svc -o wide

      - name: Detect service names (product/order)
        id: detect_svcs
        shell: bash
        run: |
          set -e
          PROD_NAME=$(kubectl -n "$NS" get svc -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | grep -E '^product' | head -1 || true)
          ORD_NAME=$(kubectl -n "$NS" get svc -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | grep -E '^order'   | head -1 || true)
          [ -z "$PROD_NAME" ] && PROD_NAME="product-service"
          [ -z "$ORD_NAME" ]  && ORD_NAME="order-service"
          echo "PRODUCT_SVC=$PROD_NAME" >> $GITHUB_ENV
          echo "ORDER_SVC=$ORD_NAME"   >> $GITHUB_ENV
          echo "Detected PRODUCT_SVC=$PROD_NAME  ORDER_SVC=$ORD_NAME"

      # ðŸ”§ Force both services to LoadBalancer so they can get public IPs
      - name: Ensure services are type LoadBalancer
        shell: bash
        run: |
          for SVC in "$PRODUCT_SVC" "$ORDER_SVC"; do
            TYPE=$(kubectl -n "$NS" get svc "$SVC" -o jsonpath='{.spec.type}' 2>/dev/null || echo "")
            if [ "$TYPE" != "LoadBalancer" ]; then
              echo "Patching $SVC to type LoadBalancer (was '$TYPE')"
              kubectl -n "$NS" patch svc "$SVC" --type merge -p '{"spec":{"type":"LoadBalancer"}}'
            else
              echo "$SVC already LoadBalancer"
            fi
          done
          echo "--- services after patch ---"
          kubectl -n "$NS" get svc -o wide

      - name: Wait for LoadBalancer IPs (<=10 min)
        shell: bash
        run: |
          set -e
          for i in {1..120}; do
            PROD_IP=$(kubectl -n "$NS" get svc "$PRODUCT_SVC" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            ORD_IP=$(kubectl -n "$NS"  get svc "$ORDER_SVC"   -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            echo "Attempt $i: product=${PROD_IP:-<none>} order=${ORD_IP:-<none>}"
            if [[ -n "$PROD_IP" && -n "$ORD_IP" ]]; then
              echo "PRODUCT_IP=$PROD_IP" >> $GITHUB_ENV
              echo "ORDER_IP=$ORD_IP"   >> $GITHUB_ENV
              exit 0
            fi
            sleep 5
          done
          echo 'Timed out waiting for external IPs'
          echo '--- describe services ---'
          kubectl -n "$NS" describe svc "$PRODUCT_SVC" || true
          kubectl -n "$NS" describe svc "$ORDER_SVC"   || true
          echo '--- recent events ---'
          kubectl -n "$NS" get events --sort-by=.lastTimestamp | tail -n 100 || true
          exit 1

      - id: out_prod_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - id: out_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Azure Logout
        if: always()
        run: az logout
