name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'aks-week08-pramodya'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'rg-week08-pramodya'
      aks_acr_name:
        description: 'Name of ACR (not loginServer)'
        required: true
        default: 'acrweek08pramodya'

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    outputs:
      INGRESS_IP: ${{ steps.get_ingress_ip.outputs.ip }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ github.event.inputs.aks_cluster_name }}
          resource-group: ${{ github.event.inputs.aks_resource_group }}

      # Optional â€“ make non-fatal if your SP isn't Owner
      - name: Attach ACR to AKS
        continue-on-error: true
        run: |
          az aks update \
            --name "${{ github.event.inputs.aks_cluster_name }}" \
            --resource-group "${{ github.event.inputs.aks_resource_group }}" \
            --attach-acr "${{ github.event.inputs.aks_acr_name }}" || true

      - name: Setup helm
        uses: azure/setup-helm@v4

      - name: Install/upgrade NGINX Ingress (single public IP)
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx --create-namespace

      - name: Apply k8s manifests (ClusterIP services + ingress)
        run: |
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-db.yaml
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml
          kubectl apply -f k8s/frontend.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl get pods -A
          kubectl get svc  -A

      - name: Wait for Ingress public IP
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..120}; do
            IP=$(kubectl get svc ingress-nginx-controller -n ingress-nginx \
                -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            echo "Attempt $i: INGRESS_IP=${IP:-<pending>}"
            if [[ -n "${IP:-}" ]]; then
              echo "INGRESS_IP=$IP" >> $GITHUB_ENV
              break
            fi
            sleep 5
          done
          if [[ -z "${IP:-}" ]]; then
            echo "Timed out waiting for ingress IP"
            kubectl get svc -n ingress-nginx -o wide
            exit 1
          fi

      - id: get_ingress_ip
        name: Capture INGRESS_IP output
        run: echo "ip=${{ env.INGRESS_IP }}" >> $GITHUB_OUTPUT

      - name: Logout
        if: always()
        run: az logout
